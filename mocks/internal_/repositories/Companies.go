// Code generated by mockery v2.20.0. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/itzurabhi/companies-micro/internal/models"
)

// Companies is an autogenerated mock type for the Companies type
type Companies struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Companies) Create(ctx context.Context, data models.Company) (models.Company, error) {
	ret := _m.Called(ctx, data)

	var r0 models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Company) (models.Company, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Company) models.Company); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Company) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Companies) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Companies) Get(ctx context.Context, id string) (models.Company, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Company, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Company); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, id, req
func (_m *Companies) Patch(ctx context.Context, id string, req models.Company) (models.Company, error) {
	ret := _m.Called(ctx, id, req)

	var r0 models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Company) (models.Company, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Company) models.Company); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.Company) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanies interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanies creates a new instance of Companies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanies(t mockConstructorTestingTNewCompanies) *Companies {
	mock := &Companies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
